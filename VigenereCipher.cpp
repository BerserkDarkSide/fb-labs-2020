#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <fstream>
#include <regex>
#include <vector>
#include <string>
#include <clocale>
#include <windows.h>


using namespace std;


int func(char ch) {
	int r = -1;
	if (ch == 'À' || ch == 'à') r = 0;
	else if (ch == 'Á' || ch == 'á') r = 1;
	else if (ch == 'Â' || ch == 'â') r = 2;
	else if (ch == 'Ã' || ch == 'ã') r = 3;
	else if (ch == 'Ä' || ch == 'ä') r = 4;
	else if (ch == 'Å' || ch == 'å' || ch == '¨' || ch == '¸') r = 5;
	else if (ch == 'Æ' || ch == 'æ') r = 6;
	else if (ch == 'Ç' || ch == 'ç') r = 7;
	else if (ch == 'È' || ch == 'è') r = 8;
	else if (ch == 'É' || ch == 'é') r = 9;
	else if (ch == 'Ê' || ch == 'ê') r = 10;
	else if (ch == 'Ë' || ch == 'ë') r = 11;
	else if (ch == 'Ì' || ch == 'ì') r = 12;
	else if (ch == 'Í' || ch == 'í') r = 13;
	else if (ch == 'Î' || ch == 'î') r = 14;
	else if (ch == 'Ï' || ch == 'ï') r = 15;
	else if (ch == 'Ğ' || ch == 'ğ') r = 16;
	else if (ch == 'Ñ' || ch == 'ñ') r = 17;
	else if (ch == 'Ò' || ch == 'ò') r = 18;
	else if (ch == 'Ó' || ch == 'ó') r = 19;
	else if (ch == 'Ô' || ch == 'ô') r = 20;
	else if (ch == 'Õ' || ch == 'õ') r = 21;
	else if (ch == 'Ö' || ch == 'ö') r = 22;
	else if (ch == '×' || ch == '÷') r = 23;
	else if (ch == 'Ø' || ch == 'ø') r = 24;
	else if (ch == 'Ù' || ch == 'ù') r = 25;
	else if (ch == 'Ú' || ch == 'ú') r = 26;
	else if (ch == 'Û' || ch == 'û') r = 27;
	else if (ch == 'Ü' || ch == 'ü') r = 28;
	else if (ch == 'İ' || ch == 'ı') r = 29;
	else if (ch == 'Ş' || ch == 'ş') r = 30;
	else if (ch == 'ß' || ch == 'ÿ') r = 31;
	return r;
}

char refunc(int n)
{
	switch (n)
	{
	case 0: return 'à';
		break;
	case 1: return 'á';
		break;
	case 2: return 'â';
		break;
	case 3: return 'ã';
		break;
	case 4: return 'ä';
		break;
	case 5: return 'å';
		break;
	case 6: return 'æ';
		break;
	case 7: return 'ç';
		break;
	case 8: return 'è';
		break;
	case 9: return 'é';
		break;
	case 10: return 'ê';
		break;
	case 11: return 'ë';
		break;
	case 12: return 'ì';
		break;
	case 13: return 'í';
		break;
	case 14: return 'î';
		break;
	case 15: return 'ï';
		break;
	case 16: return 'ğ';
		break;
	case 17: return 'ñ';
		break;
	case 18: return 'ò';
		break;
	case 19: return 'ó';
		break;
	case 20: return 'ô';
		break;
	case 21: return 'õ';
		break;
	case 22: return 'ö';
		break;
	case 23: return '÷';
		break;
	case 24: return 'ø';
		break;
	case 25: return 'ù';
		break;
	case 26: return 'ú';
		break;
	case 27: return 'û';
		break;
	case 28: return 'ü';
		break;
	case 29: return 'ı';
		break;
	case 30: return 'ş';
		break;
	case 31: return 'ÿ';
		break;

	}
}

int* encode(int* text, int* key, int size_text, int size_key) {
	int* buff_key = new int[size_text];
	int* ciphertext = new int[size_text];

	/* Ñòâîğşºìî ìàñèâ ç êëş÷åì äëÿ íàøîãî òåêñòó.
		Íàïğèêëàä, êëş÷ LEMON:
			Èñõîäíûé òåêñò:       ATTACKATDAWN
			Êëş÷:                 LEMONLEMONLE
			Çàøèôğîâàííûé òåêñò : LXFOPVEFRNHR
	*/
	for (int i = 0; i < size_text; i++)
	{
		buff_key[i] = key[i % size_key];
	}

	for (int i = 0; i < size_text; i++)
	{
		ciphertext[i] = (text[i] + buff_key[i]) % 32; //ñòâîğşºìî øèôğîòåêñò 
	}
	return ciphertext;
}

float index_conformity(int* text, int size_text, int r = 1) {
	int abetka[32] = { 0 }; //ìàññèâ ë³òåğ â³ä 0-à äî 32 - ÿ
	float index = 0.0;

	int k = 0;
	int q = 0;
	while (k < size_text)
	{
		//cout << text[i] << ", ";
		if (text[k] > -1)
			abetka[text[k]]++;
		q++;
		k = q * r;
	}
	size_text /= r;


	//cout << endl;
	//for (int i = 0; i < 32; i++) //âèâ³ä ë³òåğ ³ êë³üêîñ³ò³ ¿õ ïîòîâğåíü 
	//{
	//	if (i % 8 == 0) cout << endl;
	//	cout << refunc(i) << ": " << abetka[i] << "\t";
	//}


	for (int i = 0; i < 32; i++) //Âèçíà÷åííÿ ñóìè ³íäåêñà â³äïîâ³äíîñò³ (²Â)
	{
		index += abetka[i] * (abetka[i] - 1);
	}

	index *= 1.0 / (size_text * (size_text - 1)); //ïî ôîğìóë³ ²Â

	return index;
}

void decode(int* text) {
	
	cout << "'r'\t IndexConf" << endl;
	for (int i = 1; i < 30; i++) {
		cout << " " << i << "\t " << index_conformity(text, 8057, i) << endl;
	}

}



int main() {
	setlocale(LC_ALL, "Russian");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	cout << "Created by Sherbakov Oleg, Kirill Dyakovskiy." << endl;
	cout << "---------------------------------------------" << endl;

	ifstream ifsFileMain;
	ifsFileMain.open("plainText.txt");

	if (ifsFileMain.is_open() != 1) {
		cout << "ERROR :: File didn't open." << endl;
		ifsFileMain.close();
		return -1;
	}

	vector<char> vcMessageTmp;
	char cLetterTmp;
	regex rOnlyRusLett("([À-ßà-ÿ])");
	cmatch rcResult;

	do {
		ifsFileMain.get(cLetterTmp);
		if (cLetterTmp == '¸' || cLetterTmp == '¨' || regex_match(&cLetterTmp, rcResult, rOnlyRusLett) == true) {
			switch (cLetterTmp) {
			case '¨':
				vcMessageTmp.push_back('å');
				break;
			case '¸':
				vcMessageTmp.push_back('å');
				break;
			case 'À':
				vcMessageTmp.push_back('à');
				break;
			case 'Á':
				vcMessageTmp.push_back('á');
				break;
			case 'Â':
				vcMessageTmp.push_back('â');
				break;
			case 'Ã':
				vcMessageTmp.push_back('ã');
				break;
			case 'Ä':
				vcMessageTmp.push_back('ä');
				break;
			case 'Å':
				vcMessageTmp.push_back('å');
				break;
			case 'Æ':
				vcMessageTmp.push_back('æ');
				break;
			case 'Ç':
				vcMessageTmp.push_back('ç');
				break;
			case 'È':
				vcMessageTmp.push_back('è');
				break;
			case 'Ê':
				vcMessageTmp.push_back('ê');
				break;
			case 'Ë':
				vcMessageTmp.push_back('ë');
				break;
			case 'Ì':
				vcMessageTmp.push_back('ì');
				break;
			case 'Í':
				vcMessageTmp.push_back('í');
				break;
			case 'Î':
				vcMessageTmp.push_back('î');
				break;
			case 'Ï':
				vcMessageTmp.push_back('ï');
				break;
			case 'Ğ':
				vcMessageTmp.push_back('ğ');
				break;
			case 'Ñ':
				vcMessageTmp.push_back('ñ');
				break;
			case 'Ò':
				vcMessageTmp.push_back('ò');
				break;
			case 'Ó':
				vcMessageTmp.push_back('ó');
				break;
			case 'Ô':
				vcMessageTmp.push_back('ô');
				break;
			case 'Õ':
				vcMessageTmp.push_back('õ');
				break;
			case 'Ö':
				vcMessageTmp.push_back('ö');
				break;
			case '×':
				vcMessageTmp.push_back('÷');
				break;
			case 'Ø':
				vcMessageTmp.push_back('ø');
				break;
			case 'Ù':
				vcMessageTmp.push_back('ù');
				break;
			case 'Ú':
				vcMessageTmp.push_back('ú');
				break;
			case 'Û':
				vcMessageTmp.push_back('û');
				break;
			case 'Ü':
				vcMessageTmp.push_back('ü');
				break;
			case 'İ':
				vcMessageTmp.push_back('ı');
				break;
			case 'Ş':
				vcMessageTmp.push_back('ş');
				break;
			case 'ß':
				vcMessageTmp.push_back('ÿ');
				break;
			default:
				vcMessageTmp.push_back(cLetterTmp);
				break;
			}
		}
	} while (!ifsFileMain.eof());

	char* cArrMessageTmp = new char[vcMessageTmp.size()];

	cout << "[Enter] Your key: ";
	string sKeyMesTmp;
	cin >> sKeyMesTmp;

	char* cArrKeyTmp = new char[sKeyMesTmp.size()];
	
	strcpy(cArrKeyTmp, sKeyMesTmp.c_str());

	int* iArrMesAnsii = new int[vcMessageTmp.size()];
	int* iArrKeyAncii = new int[sKeyMesTmp.size()];

	for (int i = 0; i < vcMessageTmp.size(); i++) {
		cArrMessageTmp[i] = vcMessageTmp[i];
	}


	for (int i = 0; i < vcMessageTmp.size(); i++) {
		iArrMesAnsii[i] = func(cArrMessageTmp[i]);
	}
	for (int i = 0; i < sKeyMesTmp.size(); i++) {
		iArrKeyAncii[i] = func(cArrKeyTmp[i]);
	}

	cout << endl << endl;

	int* iArrCipherText = encode(iArrMesAnsii, iArrKeyAncii, vcMessageTmp.size(), sKeyMesTmp.size());
	
	cout << "Plain text: ";
	for (int i = 0; i < vcMessageTmp.size(); i++) {
		cout << cArrMessageTmp[i];
	}
	cout << endl;
	cout << "Chiper text: ";
	for (int i = 0; i < vcMessageTmp.size(); i++) {
		cout << refunc(iArrCipherText[i]);
	}

	float fIndexConformity = index_conformity(iArrCipherText, vcMessageTmp.size());
	cout.precision(3);
	cout << endl << endl <<  "Index conformity: " << fIndexConformity << endl << endl;

	char lab[] = "ôâîüçòûóïäûäêñûîãûúüæêéşûè÷ø÷ôíúîäòìòààíãùèíïàôêòìñòëçóıåø÷êôôüöòëçóıåø÷îåçäôêãäóğëêúâèòşûğãúàôåøğùåõîèïèàğìúûüøíäçèíşùáöæêòãàöäùğãòéîûöıêõàáõîäéöùöìöìåûîúâşçàúíøöîêéîñïóşàôıìîîôììúâóğÿûëòûìóôëúğãæöëçòâìøôíúâãïşìüøàâåèáûòíøğúìæúğèòæÿğôğğúææãêõéàùîìıîÿò÷éëõ÷æúâñôöşàõêîåçäıòóÿóüıø÷ó÷éëñíëğşáãöîåïõüùïèàùúıîóääöøıîõôóîú÷üó÷òàñâââéõşøòñóåá÷îóáøúçıùç÷òíãèôûóùãèñğõòàıòãàúôèìğçéééôåøşşúóò÷óêçêğíâòéğûõÿáéééñêõõı÷öóïçìæáşğèıûçäìàğõäûğåíğòììïûğööüîàïõÿëñêûçöóáäíñáüããõîóáõæîîêìø÷àùÿêéôïıîîıóãèøñğğéîìèæşùúìêõáæïäöîåôüùéûöäıìáıÿë÷ıüãîüòóêéçõíãÿşéìõäêñá÷èåãæìğéó÷åïüıêåşõèãÿñïêëàúâşõáïéîêáïäæîäñûêûéíşâòìóùîìÿü÷éûéñóïêıîìñé÷ûîüòóçüóàäàüäà÷ûıîóìúêîõğçıêìûíííëïşûêùéóàòåæêõêóøğúäëüíáüüöçâñùôåòığôéìñìèıûúıøõîøıü÷èôìğşéúôçòìáø÷èûüîàôîïååá÷îìûüäûîöäíùóìñõıéñıõîæêñäëçãûöáıêàóïìáşğèûöıçïûáğìíèõóøı÷ööåêõìæìíÿõúûíêãêö÷áşëëòüûàúóñåôñôâãûöûéìóôóûæììõàóîéğîííõîîóóğõùéàğç÷ñüëêãùúìıøøòøçóñğğëãûéîÿıúäúåèøûáòıñşıçäçìñÿáüşèéúêíõîúìîõûùöÿôâõòåøîõëùèåøğòåõæüóúøğìæêÿşçæ÷ıüåøãüàöàòêóáåóüøãöëåùşêæëúâñôêëâêğçõñïşûèÿóşæï÷óçìíìëëáıñëïòïêíçÿêëïıúåêåêçäçìñÿòÿñÿõóìåîèñøñúÿöëıığîóìôäèàôôıêííêæêõğöúüõæïôâçüáñíãúü÷à÷í÷ôìíèìñøıçíêíóáôüóîäàîş÷ùşıèäúåèèÿóüàîñíåëüøèóãûçëøúâıîüûîîìõúıêùâöàèúèïàîıìõîãğééùûïáüıíøíïíéèîñè÷îøàîùáäìãììèôùëúâîåòäàñÿôìåşééáäğéóñíğğíãíïûêêğéñçãüóãîïóìóæüüíñóüøû÷óäõääğàïõ÷úìüîïóæäşüôïöıêøøğîñêûîüøıìíæàòåææÿòşçóïéçàğèòçÿáöèøìû÷áúêæá÷èíşıçíêúêôïïşîåğàìúôüãàïæìğã÷üãûúüäåñéúâôåşìê÷áíåèüîàìôîîûóãâğöïüùëæîëîûàòóìçìñÿÿüÿÿøïïêíáıëëòüúüãóîóêéúóôâşúãüêóäóêÿäññûñä÷îôóğëçòñçûúçùşçéğáşåíşöøúìùáğòíèäîïúñèéôçööæúåíğõñè÷üçöéà÷îğğàüàüöëéééèïöâöüéöîúïìéìãóøğìíøûçòàæôìëúü÷àáøâñìíûóôúî÷ûûêæóóáüåçıóõæıøêìäıôâãïÿèçïôæøõîüàğøäìçòıõúïêïîòøÿèçêøğ÷òìúåâôü÷á÷îãàïüîğöçöş÷ùüäêïäşåîîòúşïğıíîêşîóşóÿáïúêò÷îûÿõìøìåûîîóæê÷üğşğıåúéíåóìôïñüüåãöîåíìéñòóşûÿıığçöìíşîìÿóãûüöïåæáüååşåöà÷îâğòèîîôúóúíáóôğìşúïóşÿşîùîíóöîôñíÿóüìüûá÷ôäùàçæîş÷úáïíóáüåòûóşûèçêîõûıäóğøúèøúçéìéúğñóğâà÷àòêöïşìñøõìèéàêäïäşåóğàÿëø÷æíóçúìãâöñäòñçòéü÷îæøóõşúáãóóìñğåğùôéáóïáçìÿáñïóğıêáóôéçìïñôãîûüöôáïäıòíøıúêøùéıìáîğã÷ûçàûàğõòéçğñüîäåêûçíõëüàåøúìúûîãóöüòíëæîóûîáîüìşúæèòî÷ûıõæøåìëöãïôñæïõğñæîúâóõúëåêøïêëéìêñüéõãìóóáğüûîçşõüãüóíáñ÷õòëÿüíëøÿúêíéìğööûúìüöæêğêùñõàîşãìûğôòîüÿôğùûàúóæğòôìäëıüõçøşæóííììñôó÷÷÷éîåôıìëèâüøìíşáìñêõñõàó÷éóúïóçêüàêşğúşøöóôòçèçñòîùãéàâïûîúíèÿüùúüûğæÿçúêñóüúèûüãíôüñòôïñüûëöôáğáùÿëûöüéöîúï÷ûûğëÿüğèéùâöàéìñõàóøà÷î÷öìéşåóõÿúçúîóöğüşğëòîëâêşèåæçñíğë÷ùûôüïêûéôêâıóğîöîàüöêéòñáîøéïáæåûéúåïõÿşéîùá÷òìïîåûöìèüöìçäìôàõşúğéìóòíöá÷üğşÿúéëçêğäûùåêıîöéöäõçòîîñõğşøã÷óõçäííûèóüıëıøâñìêşîóòî÷ãìóòòéáúòóãïôæòõïåéîñëëâîøéáóïáñá÷şäïàüûñïğîñäöîåàüøûâøâóåéêõãûîìëëîíêöëüåêàöşàõêïóø÷üêğãùìã÷îñõòóèèæıüüãúááèôüíèõõùëêøàáò÷çìñÿúîûêïàê÷ñêõçèûóùãöîííñéôêãøõîöûüìóíÿÿùëúüşéúüåóöê÷üíşåşéìüéòìæ÷îàâüãîîüäğäëşÿøÿşñìüáñòÿåéëèüóùíñîîêöéúñïãàôæûíïåîêùåúıööâêàòêóáşàîúîöôïûáüìåáâñáàôåığıéòììñíğíùãéöñóîüëíëïïçæøóûêèü÷åíşõìüõáæıäûúâùğáûéúÿôçòşìëãòüïëïãçöôáíğñûìíãéîïøöæìæëòüıæïõâîõæúíâôóîåêíéàîüşàâúüäàõóìíïäòèêıêğûùüúøõîüåìáùçóòæşäìãúáóğõôæêáóíïáùíöîşìüøàõñÿí÷èîğòùéıïçéìçöîûõùñåùî÷ò÷çúîêşûúçõöøóçììáëâó÷úùóòêèáüíöûüı÷ñşâüîäüàôèöüãõöóáççìçãşÿşàôùçòéçôèñıúñÿõóïòòêûóôâöîûúïâğéîúòåïõìæòïçöóìñêñáùúı÷üñóèü÷ìğõàúôò÷îêüêöáñûàìıâöëöãïûîâáîúíöóúïäììçëûüöéâøâñìäöóóõğúçøÿíååäîâèàóîåıÿôäçäîàåèáêşøşíóæäùóâÿşúêıÿôíïüıêåşõèêêùşûÿéññíşùèåøúçğîäáìñıóşçêùğçäîúäñàüïéóúğîğü÷îåğàúìõóïûòåüàäşàìàâêãêëêïîğìøìıùşğüéèşàíãôôüåàşçòãèìöòøìòïÿôçéüîàğáîúìáîó÷ïäîèîğíïëêïê÷éçëøåëşëúïúõôòàùîæøıÿìüüëñéôúêëÿşñÿııòêèä÷àâçóüàñıâõ÷àùåìíàúäğóæóôêïîìıîóûîığêèïşàíãôíîîêæóåìûîôâîüûóÿáñééëíèàîóéáîòóæüşüïãôôå÷óğ÷ô÷îàâşàøà÷íéåçäûíñâöóãúüäåñéúãñòõïæéòâñéà÷åğıüùûíûõğõûûîçıí÷çïæğïìãìñõëùıíøùãööê÷áñüûñıûöíåùôñâèûêùîüêóäåáóìñõñúıïòğñäæìêõşùèåøñğõéÿüàäøàñææÿìõÿçıÿë÷ğôÿıíæêäæşèåøşúıêùâìäæ÷èğğûôàòığìæê÷èîğşúçêæìêóáüåìâöışêùğôäéìëáñöøîèóà÷ôïıööÿöı÷öüéåêüşîèòüîëïúáôòàı÷èâîğà÷óåøğáùÿïõôğîôüíêñûøèğõúùéíüñóğû÷îôìöÿíúîôíïêşîåğşùöóğêéæëüîúõúüûûÿõéìçìÿæûîîèøóïêòğúğïûóùãïîóóèáüæãıöñé÷üçëéæúìòõûıãúüäåïêùåçşÿşûüøêõéëñéğşñúæòÿôåìíûîîìõúıêûïóçêîóíàüøèøúîêõîñàæğğúí÷îìóñáâèññüøèïıâõäíşğñúõìÿòâêõäèíàïøõìşêòğüñêøóãàşìåôàõõ÷ëüîòãÿşãâêêòéãììèâöä÷ñîäõéèëîäãåñèòíäçÿíäåìèøúæïåâõòàñååÿöàãóöôõäşùèùğòñêüøâçòçèõãÿşúúìöíåõáíÿêıîêéáóïáóçúõñıóÿìòòùíæüùåõõşûàõöäåõşúååşùèèêõïåîêøàâÿóıèéùàæìîóëşõæÿíôöêòéêğíñúşìí÷üñêôáùîôøàôğûğğöóäşàğıööéìûâçòíûèõğàñæï÷ÿ÷òêùïóşğñÿúüù÷òçôäãñé÷éøòïóæáğåóúüğéìüíáñêúáıõúôìüüçööêëëñáóíà÷îãåïæñíãôòîàúêàñòáõêñüûìíåëæåîäõñãüüğàõêïàíæìïíğûùûûüóêèáõïñèøúææûğñ÷êíùèööşãèòâæÿéñïñòîğèøïığòıñçôÿşúìıüæåïâôâãâêÿçïûáïòéıïèúàçãôîó÷ôú÷èôıîîûúóïòÿèùàğõòñæèïğõıêøìñöóşîáöôêïøşàíñéùàúîéóëçôëôïóıæòïıçéàüîåáóşûôöğôôêöèğãùúìæîïê÷ëìëñõúÿèêñğğòşÿñõş÷øúìúçööáıâñôüõéüùêüäáşñâàóğåòúêöóêıîäıüıíéúêïóììêõøåñìôüëíöáúğèâöãàûøğîğüïèëáö÷÷÷üòåëşôòñùöùíıöøíéåíûôâşúûîîñ÷ììÿåõáíöèïÿôåñàìğõıüõìòàõåúäôõãüüòàüíçşééñáè÷ûìÿïôïåñáûğëûöãèêíìåîüëòñóşìèòäâøèêïååëáéææâğçæ÷ıîíøóşëêğıøçéúìñòÿöûõéõçäà÷àíşğïëıòıçÿıüîûõûùéóûâôòşñğøıüıíæõçñïäÿäóøîğÿıïıôòàøåõğìåãïüãğäæìóçàáôÿøğìåğáùíşõøüîíöõğâàñéññùÿêõóïòÿáıòèıéöû÷îíàõãìòøûüõıøòğîôüóäèûóùèåóñåôêõòóş÷öéóığéşáøíşåúúìüüäéäççñşõÿşëêôïíîäûğëıöáüîöôêïøùîçàóøæèçêê÷ëôğãïÿèèêşèåæ÷ñàîõïìëîéâìèáıüñáöùöòõæêæüşåîìÿşıøøâïòáşîñáüíà÷ûğêõçôóúõÿş÷áàğëìîñëëôüïàìéäåğëôğşåüüéâöç÷äæôåñáöùöûóòêåìôñõëóşëïıçş÷õôåêğüıã÷îîíıáöîúõàùàëüğööìúâèàãôäïùğçÿåöîåõşıëïòêïòîúğñóüöéïñæêóìúãîïòçıêìôìäîüàåûóùèåóãêôáóêëøÿúìïûìíõüøàéõòúşïğâğéâôòåôü÷ã÷óìåîë÷şûúîùûîûçõäíûèôıüõêòîíàéí÷èôüüşëïàşöùê÷ìãúşìúùöâğÿşôäèıïñæå÷ğæòàúêë÷üıã÷ğôóôêõïñâü÷ôïığ÷éèùåèøõñæï÷âçúáùòóõæôëøøğêëá÷åğşóğèøÿìõäëú÷íğúôìêúâéòÿñâãòøúææäççòãğåîğûùöÿığğéåôîäûîöûÿàõñäéìïñôüõÿïæşçóçúòğãìöÿïşççàûøíãáàìıõííñééëóúøàñææöñóüçñøÿüéıæïûïàííôãğğùîşõáãáïáıàîîïúäöüèêüøğóïğàèéáóîøçêğíñûöä÷ëéóùòìøèóşğìíæúğşñïêòèûóûûüöùêõæÿşåşùùîêøğñ÷èùåèõûìêúîäíöøùàññçñäáîó÷òîñêõşûôüıòşíëíşğãöóõşúîïíú÷ÿñîëæôíéÿîøıáùíñúîäæéûõğäçÿ÷ûõïçàöáÿ÷òÿúíèáùçóêàşòéêíÿêğàñææûğôôêğóïëğìíæüùêôáğíöîıìåøÿôáëéìşêıîêíåûâòìñıâèàãîìéøğîğáüûæşşìâîîïóñüıåìàîóêøÿôåôüõñâòüóÿïşèåöøıÿñâüùöÿüùêğùşîâğãğûøğğğñáîàïÿöüöøåçòàşúñòàöôçáöäàîîñëèÿîşãòöóõäãÿîõàóìşòşõãöéìåèÿşôìıàó÷æäñõñâíôèïÿîóçïşäñáøúèêùşòòììñûøâüéìîôáöüö÷õşûìêòşâîñüöîîøåñìüğğåñáùàíğåñìüğğçòîşàíïÿøéüşàòäàçìâéáêüêûàòäèúğüøğ÷éëüôøõáüäëïöùûöüàçòçùóõãàòàúóâèììÿşõÿíş÷òùêıéíşüãôóûíøğìóöêüûèşğñú÷ûıêóüüîïòéíàíîà÷ìãğâèàóõãìéñõÿÿôâãîàôâøøğòäîìêñòîùèåóäòéãìïğşüòãìæêñìşñíëúîøãúáìíåïğóüøãöéõùçèëüùÿõëæìäôîîíóìôêóëğìùãöîíòîîåğøøúıûîîóéíúêóşğñè÷üçøûäşåîìáıçòşáêöşñíëúöúÿ÷öîéæäòåğøóøüúüäíñêîçæûíğöêòòêõêîàğıéñóıàïíúáùåçşúçíåúêïòç÷åæğúôèïÿõğãîùèúõñúğøşğıéÿúÿôúîóûõığé÷èìòÿğûñíúîïöïäüîåğàèâêøííñüùèâöî÷÷áàğìäÿúäşÿşúıïòçòñ÷ñâàâöáìüóïåùîçòãúöùà÷îõüìçìñÿôáøûüêù÷òâğóïğìıíøìñóèêıèğş÷ùûöüòşìş÷îäøşúçêæìå÷âñ÷õşàúáıóôìéçñíãïÿ÷ù÷îóóûäşñâøõãàúûıú÷ÿúëíşğíûúãâ÷ìíşûøóáíëêõæêïáùíşåøúææäâñìïğèîâó÷àùîôíôêîàõìõùûáöôöòãùàõõùèèøòçğìîèñâüéıæéúêöîáøíëñáğ÷îşõèìèğåîîÿèêøÿíêèéôìë÷ùñìêàáòéîûğñåùìÿø÷óíèûåàâıîîàüøçíæê÷ãããòôıõóïòòëúêãçöîûïà÷çòíşîïòüşıïàïåğêôóïáàîà÷ûıêóêşóæøùôüøõâòãîôåñúîóûõüóáğéñíèÿüóîëîîğìıúîûğşìóïûïàéíşğãööïëêûêûÿëúïãôî÷ã÷îîêõîññóğôñè÷éçñòáõìñéûúäîáîóíèúèôâîüû÷öáøæáù÷ãûöı÷ıÿñêùêøìëıáşòïşçìõêüîíøõìøüüäõéèëÿöáıñæêıçõéàÿìãâêíéõêúêûáøçãÿşñÿåòõşìáîîôõúùûîäâ÷àçñòãòüşãúóéøïøşàõğñìêøòçîõîîîåğùúãõöğòóìúõñôö÷çòúğöïïãàìıüëıùóòçÿáÿâëôó÷ûìîîôìììâñ÷úúá÷üçöïäíûñığúâ÷öìíëéôîõúáğûëéíæïáğåğúîöìöóò÷àäùåçòáıçåÿíêñéúñíğùôæøøòóæüîëèıûçàñáãàãıçåæşöıêıñâğäíèêãúÿúüûàäêñéúèòûîùãúüäåïüøîë÷ûìèòíäóåçìñõøğìçùöòóæáğåğøííûñöòóæü÷èôìûìòïùğçéóññíøã÷àíóïéäñôïóõòìèòí÷óöçô÷ãòæôğûíòêèæúñõıéøêïÿóíğäóìñüøşéöáèêæíñãóğğêëåøâõöäùûæşïñæïûıòäíöàîìûìúğöäóóäıüë÷üíëêôâãöşììòøşúıòÿìğâóôòèûêùé÷üùáâäîòèüûúíïøòàïøëçöñéöéíàêçõáéòñúîòàüÿá÷äæôìôâşìó÷éîíòÿüîïıéøíøùşïòëúòñüáãíøàğğîêøíëçóïé÷óíáëûüàêóùëÿïàşéñáîíñùÿîàüşâìæáëëñàóúæıôâöäşûóøøıüûÿıòíõê÷íèçûúçûğç÷ééìôñıóíàûøòåíéôõòşùñäòğıöòæôõçõşñıæóäçäèûèóÿüöûñîíöãèùååşõøîüöôêïøùîïõùöãööãêëêíèçıéøêúîäéäûñùèıóıêïæêğäíèàòàöäæøÿşññáïàîğûşèøıòêèçúæëûöüîôáäóõëúëÿ÷üîûüêóäîêşîóş÷îêúüùêğûùåóøÿöèıùâçäèûèóãùçü÷áíöãëúêã÷îîÿõöïòÿáöëşúö÷ùëüëøï÷ííöûÿëüåáäíèáîêãúíıêøùéğäíæåøğùìêøøòøöêøóóşúìóôöïóğïíîíãıñëïøêò÷şûîåşòèúáóòêëÿúëñòá÷éâîæíãşçæëôîêôïáó÷äşôëãáêùûìîîôìììñõàîòşúîïíú÷úêã÷î÷ìéğııéèñíâıîûéõñğğòşçøëàüöıùùçüäñôâèáêøû÷óæøôáùñññüõÿõöïòÿáşåïıéñıøùğöÿêíğãüùëæòáéïòáóàæşşñæøóííúêıëñöóùèåóéåõëôíñùøüöõêáôôäğàåğùôıêúñíôïùåíşàúëøóóúòàıòåşÿøéúüçñèáøîğşúûéûùâòñäöîïáúñëüöæêõûşèãàæôè÷îáööüşóâúüşéúüåó÷æüàûğùìûôàğçÿåóàîòéıóï÷úïòçç÷èàûçàùşğòëäşåîìûçàááôáôüıêñáéñşõîéåæüøïëàîôâıåêğìèúşïğùúêúöäğéæìòèûêùîèğïêüéúñõìûúíêøêòéíÿìèûöüûññâéäîè÷õşõìèï÷óó";

	int* num_lab = new int[8057];
	for (int i = 0; i < 8057; i++) {
		num_lab[i] = func(lab[i]);
	}

	//cout << "Variant #4\n" << "Decrypt chiphertext: ";

	decode(num_lab);


	system("pause");
	return 0;
}